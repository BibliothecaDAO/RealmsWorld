/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment spaceFragment on Space {\n    id\n    metadata {\n      name\n      avatar\n      cover\n      about\n      external_url\n      github\n      twitter\n      discord\n      voting_power_symbol\n      treasuries\n      delegations\n      executors\n      executors_types\n      executors_destinations\n      executors_strategies {\n        id\n        address\n        destination_address\n        type\n        treasury_chain\n        treasury\n      }\n    }\n    controller\n    voting_delay\n    min_voting_period\n    max_voting_period\n    proposal_threshold\n    validation_strategy\n    validation_strategy_params\n    voting_power_validation_strategy_strategies\n    voting_power_validation_strategy_strategies_params\n    voting_power_validation_strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    strategies_indicies\n    strategies\n    strategies_params\n    strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    authenticators\n    proposal_count\n    vote_count\n    created\n  }\n": types.SpaceFragmentFragmentDoc,
    "\n  fragment proposalFragment on Proposal {\n    id\n    proposal_id\n    space {\n      id\n      controller\n      authenticators\n      metadata {\n        id\n        name\n        avatar\n        voting_power_symbol\n        treasuries\n        executors\n        executors_types\n        executors_strategies {\n          id\n          address\n          destination_address\n          type\n          treasury_chain\n          treasury\n        }\n      }\n      strategies_parsed_metadata {\n        index\n        data {\n          id\n          name\n          description\n          decimals\n          symbol\n          token\n          payload\n        }\n      }\n    }\n    author {\n      id\n      address_type\n    }\n    quorum\n    execution_hash\n    metadata {\n      id\n      title\n      body\n      discussion\n      execution\n    }\n    start\n    min_end\n    max_end\n    snapshot\n    scores_1\n    scores_2\n    scores_3\n    scores_total\n    execution_time\n    execution_strategy\n    execution_strategy_type\n    execution_destination\n    timelock_veto_guardian\n    strategies_indicies\n    strategies\n    strategies_params\n    created\n    edited\n    tx\n    execution_tx\n    veto_tx\n    vote_count\n    execution_ready\n    executed\n    vetoed\n    completed\n    cancelled\n  }\n": types.ProposalFragmentFragmentDoc,
    "\n  query proposalsQuery($first: Int!, $skip: Int!, $where: Proposal_filter) {\n    proposals(\n      first: $first\n      skip: $skip\n      where: $where\n      orderBy: created\n      orderDirection: desc\n    ) {\n      ...proposalFragment\n    }\n  }\n": types.ProposalsQueryDocument,
    "\n  query userVotesQuery(\n    $first: Int\n    $skip: Int\n    $spaceIds: [String]\n    $voter: String\n  ) {\n    votes(\n      first: $first\n      skip: $skip\n      where: { space_in: $spaceIds, voter: $voter }\n    ) {\n      id\n      voter {\n        id\n      }\n      space {\n        id\n      }\n      metadata {\n        reason\n      }\n      proposal\n      choice\n      vp\n      created\n    }\n  }\n": types.UserVotesQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment spaceFragment on Space {\n    id\n    metadata {\n      name\n      avatar\n      cover\n      about\n      external_url\n      github\n      twitter\n      discord\n      voting_power_symbol\n      treasuries\n      delegations\n      executors\n      executors_types\n      executors_destinations\n      executors_strategies {\n        id\n        address\n        destination_address\n        type\n        treasury_chain\n        treasury\n      }\n    }\n    controller\n    voting_delay\n    min_voting_period\n    max_voting_period\n    proposal_threshold\n    validation_strategy\n    validation_strategy_params\n    voting_power_validation_strategy_strategies\n    voting_power_validation_strategy_strategies_params\n    voting_power_validation_strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    strategies_indicies\n    strategies\n    strategies_params\n    strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    authenticators\n    proposal_count\n    vote_count\n    created\n  }\n"): (typeof documents)["\n  fragment spaceFragment on Space {\n    id\n    metadata {\n      name\n      avatar\n      cover\n      about\n      external_url\n      github\n      twitter\n      discord\n      voting_power_symbol\n      treasuries\n      delegations\n      executors\n      executors_types\n      executors_destinations\n      executors_strategies {\n        id\n        address\n        destination_address\n        type\n        treasury_chain\n        treasury\n      }\n    }\n    controller\n    voting_delay\n    min_voting_period\n    max_voting_period\n    proposal_threshold\n    validation_strategy\n    validation_strategy_params\n    voting_power_validation_strategy_strategies\n    voting_power_validation_strategy_strategies_params\n    voting_power_validation_strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    strategies_indicies\n    strategies\n    strategies_params\n    strategies_parsed_metadata {\n      index\n      data {\n        id\n        name\n        description\n        decimals\n        symbol\n        token\n        payload\n      }\n    }\n    authenticators\n    proposal_count\n    vote_count\n    created\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment proposalFragment on Proposal {\n    id\n    proposal_id\n    space {\n      id\n      controller\n      authenticators\n      metadata {\n        id\n        name\n        avatar\n        voting_power_symbol\n        treasuries\n        executors\n        executors_types\n        executors_strategies {\n          id\n          address\n          destination_address\n          type\n          treasury_chain\n          treasury\n        }\n      }\n      strategies_parsed_metadata {\n        index\n        data {\n          id\n          name\n          description\n          decimals\n          symbol\n          token\n          payload\n        }\n      }\n    }\n    author {\n      id\n      address_type\n    }\n    quorum\n    execution_hash\n    metadata {\n      id\n      title\n      body\n      discussion\n      execution\n    }\n    start\n    min_end\n    max_end\n    snapshot\n    scores_1\n    scores_2\n    scores_3\n    scores_total\n    execution_time\n    execution_strategy\n    execution_strategy_type\n    execution_destination\n    timelock_veto_guardian\n    strategies_indicies\n    strategies\n    strategies_params\n    created\n    edited\n    tx\n    execution_tx\n    veto_tx\n    vote_count\n    execution_ready\n    executed\n    vetoed\n    completed\n    cancelled\n  }\n"): (typeof documents)["\n  fragment proposalFragment on Proposal {\n    id\n    proposal_id\n    space {\n      id\n      controller\n      authenticators\n      metadata {\n        id\n        name\n        avatar\n        voting_power_symbol\n        treasuries\n        executors\n        executors_types\n        executors_strategies {\n          id\n          address\n          destination_address\n          type\n          treasury_chain\n          treasury\n        }\n      }\n      strategies_parsed_metadata {\n        index\n        data {\n          id\n          name\n          description\n          decimals\n          symbol\n          token\n          payload\n        }\n      }\n    }\n    author {\n      id\n      address_type\n    }\n    quorum\n    execution_hash\n    metadata {\n      id\n      title\n      body\n      discussion\n      execution\n    }\n    start\n    min_end\n    max_end\n    snapshot\n    scores_1\n    scores_2\n    scores_3\n    scores_total\n    execution_time\n    execution_strategy\n    execution_strategy_type\n    execution_destination\n    timelock_veto_guardian\n    strategies_indicies\n    strategies\n    strategies_params\n    created\n    edited\n    tx\n    execution_tx\n    veto_tx\n    vote_count\n    execution_ready\n    executed\n    vetoed\n    completed\n    cancelled\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query proposalsQuery($first: Int!, $skip: Int!, $where: Proposal_filter) {\n    proposals(\n      first: $first\n      skip: $skip\n      where: $where\n      orderBy: created\n      orderDirection: desc\n    ) {\n      ...proposalFragment\n    }\n  }\n"): (typeof documents)["\n  query proposalsQuery($first: Int!, $skip: Int!, $where: Proposal_filter) {\n    proposals(\n      first: $first\n      skip: $skip\n      where: $where\n      orderBy: created\n      orderDirection: desc\n    ) {\n      ...proposalFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query userVotesQuery(\n    $first: Int\n    $skip: Int\n    $spaceIds: [String]\n    $voter: String\n  ) {\n    votes(\n      first: $first\n      skip: $skip\n      where: { space_in: $spaceIds, voter: $voter }\n    ) {\n      id\n      voter {\n        id\n      }\n      space {\n        id\n      }\n      metadata {\n        reason\n      }\n      proposal\n      choice\n      vp\n      created\n    }\n  }\n"): (typeof documents)["\n  query userVotesQuery(\n    $first: Int\n    $skip: Int\n    $spaceIds: [String]\n    $voter: String\n  ) {\n    votes(\n      first: $first\n      skip: $skip\n      where: { space_in: $spaceIds, voter: $voter }\n    ) {\n      id\n      voter {\n        id\n      }\n      space {\n        id\n      }\n      metadata {\n        reason\n      }\n      proposal\n      choice\n      vp\n      created\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;