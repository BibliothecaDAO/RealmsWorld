/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VelordsIndexImport } from './routes/velords.index'
import { Route as RealmsIndexImport } from './routes/realms.index'
import { Route as ComingSoonIndexImport } from './routes/coming-soon.index'
import { Route as VelordsClaimImport } from './routes/velords.claim'
import { Route as RealmsClaimsImport } from './routes/realms.claims'
import { Route as RealmsBridgeImport } from './routes/realms.bridge'
import { Route as ProposalListImport } from './routes/proposal.list'
import { Route as DelegateProfileImport } from './routes/delegate.profile'
import { Route as DelegateListImport } from './routes/delegate.list'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VelordsIndexRoute = VelordsIndexImport.update({
  id: '/velords/',
  path: '/velords/',
  getParentRoute: () => rootRoute,
} as any)

const RealmsIndexRoute = RealmsIndexImport.update({
  id: '/realms/',
  path: '/realms/',
  getParentRoute: () => rootRoute,
} as any)

const ComingSoonIndexRoute = ComingSoonIndexImport.update({
  id: '/coming-soon/',
  path: '/coming-soon/',
  getParentRoute: () => rootRoute,
} as any)

const VelordsClaimRoute = VelordsClaimImport.update({
  id: '/velords/claim',
  path: '/velords/claim',
  getParentRoute: () => rootRoute,
} as any)

const RealmsClaimsRoute = RealmsClaimsImport.update({
  id: '/realms/claims',
  path: '/realms/claims',
  getParentRoute: () => rootRoute,
} as any)

const RealmsBridgeRoute = RealmsBridgeImport.update({
  id: '/realms/bridge',
  path: '/realms/bridge',
  getParentRoute: () => rootRoute,
} as any)

const ProposalListRoute = ProposalListImport.update({
  id: '/proposal/list',
  path: '/proposal/list',
  getParentRoute: () => rootRoute,
} as any)

const DelegateProfileRoute = DelegateProfileImport.update({
  id: '/delegate/profile',
  path: '/delegate/profile',
  getParentRoute: () => rootRoute,
} as any)

const DelegateListRoute = DelegateListImport.update({
  id: '/delegate/list',
  path: '/delegate/list',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/delegate/list': {
      id: '/delegate/list'
      path: '/delegate/list'
      fullPath: '/delegate/list'
      preLoaderRoute: typeof DelegateListImport
      parentRoute: typeof rootRoute
    }
    '/delegate/profile': {
      id: '/delegate/profile'
      path: '/delegate/profile'
      fullPath: '/delegate/profile'
      preLoaderRoute: typeof DelegateProfileImport
      parentRoute: typeof rootRoute
    }
    '/proposal/list': {
      id: '/proposal/list'
      path: '/proposal/list'
      fullPath: '/proposal/list'
      preLoaderRoute: typeof ProposalListImport
      parentRoute: typeof rootRoute
    }
    '/realms/bridge': {
      id: '/realms/bridge'
      path: '/realms/bridge'
      fullPath: '/realms/bridge'
      preLoaderRoute: typeof RealmsBridgeImport
      parentRoute: typeof rootRoute
    }
    '/realms/claims': {
      id: '/realms/claims'
      path: '/realms/claims'
      fullPath: '/realms/claims'
      preLoaderRoute: typeof RealmsClaimsImport
      parentRoute: typeof rootRoute
    }
    '/velords/claim': {
      id: '/velords/claim'
      path: '/velords/claim'
      fullPath: '/velords/claim'
      preLoaderRoute: typeof VelordsClaimImport
      parentRoute: typeof rootRoute
    }
    '/coming-soon/': {
      id: '/coming-soon/'
      path: '/coming-soon'
      fullPath: '/coming-soon'
      preLoaderRoute: typeof ComingSoonIndexImport
      parentRoute: typeof rootRoute
    }
    '/realms/': {
      id: '/realms/'
      path: '/realms'
      fullPath: '/realms'
      preLoaderRoute: typeof RealmsIndexImport
      parentRoute: typeof rootRoute
    }
    '/velords/': {
      id: '/velords/'
      path: '/velords'
      fullPath: '/velords'
      preLoaderRoute: typeof VelordsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/delegate/list': typeof DelegateListRoute
  '/delegate/profile': typeof DelegateProfileRoute
  '/proposal/list': typeof ProposalListRoute
  '/realms/bridge': typeof RealmsBridgeRoute
  '/realms/claims': typeof RealmsClaimsRoute
  '/velords/claim': typeof VelordsClaimRoute
  '/coming-soon': typeof ComingSoonIndexRoute
  '/realms': typeof RealmsIndexRoute
  '/velords': typeof VelordsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/delegate/list': typeof DelegateListRoute
  '/delegate/profile': typeof DelegateProfileRoute
  '/proposal/list': typeof ProposalListRoute
  '/realms/bridge': typeof RealmsBridgeRoute
  '/realms/claims': typeof RealmsClaimsRoute
  '/velords/claim': typeof VelordsClaimRoute
  '/coming-soon': typeof ComingSoonIndexRoute
  '/realms': typeof RealmsIndexRoute
  '/velords': typeof VelordsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/delegate/list': typeof DelegateListRoute
  '/delegate/profile': typeof DelegateProfileRoute
  '/proposal/list': typeof ProposalListRoute
  '/realms/bridge': typeof RealmsBridgeRoute
  '/realms/claims': typeof RealmsClaimsRoute
  '/velords/claim': typeof VelordsClaimRoute
  '/coming-soon/': typeof ComingSoonIndexRoute
  '/realms/': typeof RealmsIndexRoute
  '/velords/': typeof VelordsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/delegate/list'
    | '/delegate/profile'
    | '/proposal/list'
    | '/realms/bridge'
    | '/realms/claims'
    | '/velords/claim'
    | '/coming-soon'
    | '/realms'
    | '/velords'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/delegate/list'
    | '/delegate/profile'
    | '/proposal/list'
    | '/realms/bridge'
    | '/realms/claims'
    | '/velords/claim'
    | '/coming-soon'
    | '/realms'
    | '/velords'
  id:
    | '__root__'
    | '/'
    | '/delegate/list'
    | '/delegate/profile'
    | '/proposal/list'
    | '/realms/bridge'
    | '/realms/claims'
    | '/velords/claim'
    | '/coming-soon/'
    | '/realms/'
    | '/velords/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DelegateListRoute: typeof DelegateListRoute
  DelegateProfileRoute: typeof DelegateProfileRoute
  ProposalListRoute: typeof ProposalListRoute
  RealmsBridgeRoute: typeof RealmsBridgeRoute
  RealmsClaimsRoute: typeof RealmsClaimsRoute
  VelordsClaimRoute: typeof VelordsClaimRoute
  ComingSoonIndexRoute: typeof ComingSoonIndexRoute
  RealmsIndexRoute: typeof RealmsIndexRoute
  VelordsIndexRoute: typeof VelordsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DelegateListRoute: DelegateListRoute,
  DelegateProfileRoute: DelegateProfileRoute,
  ProposalListRoute: ProposalListRoute,
  RealmsBridgeRoute: RealmsBridgeRoute,
  RealmsClaimsRoute: RealmsClaimsRoute,
  VelordsClaimRoute: VelordsClaimRoute,
  ComingSoonIndexRoute: ComingSoonIndexRoute,
  RealmsIndexRoute: RealmsIndexRoute,
  VelordsIndexRoute: VelordsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/delegate/list",
        "/delegate/profile",
        "/proposal/list",
        "/realms/bridge",
        "/realms/claims",
        "/velords/claim",
        "/coming-soon/",
        "/realms/",
        "/velords/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/delegate/list": {
      "filePath": "delegate.list.tsx"
    },
    "/delegate/profile": {
      "filePath": "delegate.profile.tsx"
    },
    "/proposal/list": {
      "filePath": "proposal.list.tsx"
    },
    "/realms/bridge": {
      "filePath": "realms.bridge.tsx"
    },
    "/realms/claims": {
      "filePath": "realms.claims.tsx"
    },
    "/velords/claim": {
      "filePath": "velords.claim.tsx"
    },
    "/coming-soon/": {
      "filePath": "coming-soon.index.tsx"
    },
    "/realms/": {
      "filePath": "realms.index.tsx"
    },
    "/velords/": {
      "filePath": "velords.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
