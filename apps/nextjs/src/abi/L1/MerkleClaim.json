{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_token",
          "type": "address",
          "internalType": "contract ERC20"
        },
        { "name": "_merkleRoot", "type": "bytes32", "internalType": "bytes32" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claim",
      "inputs": [
        { "name": "amount", "type": "uint256", "internalType": "uint256" },
        { "name": "proof", "type": "bytes32[]", "internalType": "bytes32[]" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasClaimed",
      "inputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "merkleRoot",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "token",
      "inputs": [],
      "outputs": [
        { "name": "", "type": "address", "internalType": "contract ERC20" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Claim",
      "inputs": [
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    { "type": "error", "name": "AlreadyClaimed", "inputs": [] },
    { "type": "error", "name": "NotInMerkle", "inputs": [] }
  ],
  "bytecode": {
    "object": "0x60a060405234801561001057600080fd5b506040516104dd3803806104dd83398101604081905261002f91610057565b608052600080546001600160a01b0319166001600160a01b0392909216919091179055610091565b6000806040838503121561006a57600080fd5b82516001600160a01b038116811461008157600080fd5b6020939093015192949293505050565b60805161042b6100b260003960008181605601526101a6015261042b6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780632f52ebb71461008b57806373b2e80e146100a0578063fc0c546a146100d3575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61009e610099366004610315565b6100fe565b005b6100c36100ae366004610394565b60016020526000908152604090205460ff1681565b6040519015158152602001610082565b6000546100e6906001600160a01b031681565b6040516001600160a01b039091168152602001610082565b3360009081526001602052604090205460ff161561012f57604051630c8d9eab60e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905060006101d18484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925086915061028a9050565b9050806101f15760405163452c2df160e11b815260040160405180910390fd5b336000818152600160208190526040808320805460ff19169092179091559054905163a9059cbb60e01b81526004810192909252602482018790526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561025e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028291906103bd565b505050505050565b60008261029785846102a0565b14949350505050565b600081815b84518110156102db576102d1828683815181106102c4576102c46103df565b60200260200101516102e3565b91506001016102a5565b509392505050565b60008183106102ff57600082815260208490526040902061030e565b60008381526020839052604090205b9392505050565b60008060006040848603121561032a57600080fd5b83359250602084013567ffffffffffffffff8082111561034957600080fd5b818601915086601f83011261035d57600080fd5b81358181111561036c57600080fd5b8760208260051b850101111561038157600080fd5b6020830194508093505050509250925092565b6000602082840312156103a657600080fd5b81356001600160a01b038116811461030e57600080fd5b6000602082840312156103cf57600080fd5b8151801515811461030e57600080fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220086403f0c2c6784a161147f694f9003a18b1768c4132741d19684db38686d39064736f6c63430008170033",
    "sourceMap": "473:1906:6:-:0;;;1218:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1275:24;;1324:5;:14;;-1:-1:-1;;;;;;1324:14:6;-1:-1:-1;;;;;1324:14:6;;;;;;;;;;473:1906;;14:364:7;106:6;114;167:2;155:9;146:7;142:23;138:32;135:52;;;183:1;180;173:12;135:52;209:16;;-1:-1:-1;;;;;254:31:7;;244:42;;234:70;;300:1;297;290:12;234:70;368:2;353:18;;;;347:25;323:5;;347:25;;-1:-1:-1;;;14:364:7:o;:::-;473:1906:6;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780632f52ebb71461008b57806373b2e80e146100a0578063fc0c546a146100d3575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61009e610099366004610315565b6100fe565b005b6100c36100ae366004610394565b60016020526000908152604090205460ff1681565b6040519015158152602001610082565b6000546100e6906001600160a01b031681565b6040516001600160a01b039091168152602001610082565b3360009081526001602052604090205460ff161561012f57604051630c8d9eab60e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905060006101d18484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925086915061028a9050565b9050806101f15760405163452c2df160e11b815260040160405180910390fd5b336000818152600160208190526040808320805460ff19169092179091559054905163a9059cbb60e01b81526004810192909252602482018790526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561025e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028291906103bd565b505050505050565b60008261029785846102a0565b14949350505050565b600081815b84518110156102db576102d1828683815181106102c4576102c46103df565b60200260200101516102e3565b91506001016102a5565b509392505050565b60008183106102ff57600082815260208490526040902061030e565b60008381526020839052604090205b9392505050565b60008060006040848603121561032a57600080fd5b83359250602084013567ffffffffffffffff8082111561034957600080fd5b818601915086601f83011261035d57600080fd5b81358181111561036c57600080fd5b8760208260051b850101111561038157600080fd5b6020830194508093505050509250925092565b6000602082840312156103a657600080fd5b81356001600160a01b038116811461030e57600080fd5b6000602082840312156103cf57600080fd5b8151801515811461030e57600080fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220086403f0c2c6784a161147f694f9003a18b1768c4132741d19684db38686d39064736f6c63430008170033",
    "sourceMap": "473:1906:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;598:35;;;;;;;;160:25:7;;;148:2;133:18;598:35:6;;;;;;;;1819:558;;;;;;:::i;:::-;;:::i;:::-;;777:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1340:14:7;;1333:22;1315:41;;1303:2;1288:18;777:42:6;1175:187:7;640:18:6;;;;;-1:-1:-1;;;;;640:18:6;;;;;;-1:-1:-1;;;;;1544:32:7;;;1526:51;;1514:2;1499:18;640::6;1367:216:7;1819:558:6;1965:10;1954:22;;;;:10;:22;;;;;;;;1950:51;;;1985:16;;-1:-1:-1;;;1985:16:6;;;;;;;;;;;1950:51;2094:36;;-1:-1:-1;;2111:10:6;1765:2:7;1761:15;1757:53;2094:36:6;;;1745:66:7;1827:12;;;1820:28;;;2069:12:6;;1864::7;;2094:36:6;;;;;;;;;;;;2084:47;;;;;;2069:62;;2141:16;2160:43;2179:5;;2160:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2186:10:6;;-1:-1:-1;2198:4:6;;-1:-1:-1;2160:18:6;;-1:-1:-1;2160:43:6:i;:::-;2141:62;;2218:11;2213:38;;2238:13;;-1:-1:-1;;;2238:13:6;;;;;;;;;;;2213:38;2307:10;2296:22;;;;2321:4;2296:22;;;;;;;;:29;;-1:-1:-1;;2296:29:6;;;;;;;2336:5;;:34;;-1:-1:-1;;;2336:34:6;;;;;2061:51:7;;;;2128:18;;;2121:34;;;-1:-1:-1;;;;;2336:5:6;;:14;;2034:18:7;;2336:34:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1885:492;;1819:558;;;:::o;1265:154:5:-;1356:4;1408;1379:25;1392:5;1399:4;1379:12;:25::i;:::-;:33;;1265:154;-1:-1:-1;;;;1265:154:5:o;1967:290::-;2050:7;2092:4;2050:7;2106:116;2130:5;:12;2126:1;:16;2106:116;;;2178:33;2188:12;2202:5;2208:1;2202:8;;;;;;;;:::i;:::-;;;;;;;2178:9;:33::i;:::-;2163:48;-1:-1:-1;2144:3:5;;2106:116;;;-1:-1:-1;2238:12:5;1967:290;-1:-1:-1;;;1967:290:5:o;9229:147::-;9292:7;9322:1;9318;:5;:51;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9318:51;;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9326:20;9311:58;9229:147;-1:-1:-1;;;9229:147:5:o;196:683:7:-;291:6;299;307;360:2;348:9;339:7;335:23;331:32;328:52;;;376:1;373;366:12;328:52;412:9;399:23;389:33;;473:2;462:9;458:18;445:32;496:18;537:2;529:6;526:14;523:34;;;553:1;550;543:12;523:34;591:6;580:9;576:22;566:32;;636:7;629:4;625:2;621:13;617:27;607:55;;658:1;655;648:12;607:55;698:2;685:16;724:2;716:6;713:14;710:34;;;740:1;737;730:12;710:34;793:7;788:2;778:6;775:1;771:14;767:2;763:23;759:32;756:45;753:65;;;814:1;811;804:12;753:65;845:2;841;837:11;827:21;;867:6;857:16;;;;;196:683;;;;;:::o;884:286::-;943:6;996:2;984:9;975:7;971:23;967:32;964:52;;;1012:1;1009;1002:12;964:52;1038:23;;-1:-1:-1;;;;;1090:31:7;;1080:42;;1070:70;;1136:1;1133;1126:12;2166:277;2233:6;2286:2;2274:9;2265:7;2261:23;2257:32;2254:52;;;2302:1;2299;2292:12;2254:52;2334:9;2328:16;2387:5;2380:13;2373:21;2366:5;2363:32;2353:60;;2409:1;2406;2399:12;2448:127;2509:10;2504:3;2500:20;2497:1;2490:31;2540:4;2537:1;2530:15;2564:4;2561:1;2554:15",
    "linkReferences": {},
    "immutableReferences": {
      "1330": [
        { "start": 86, "length": 32 },
        { "start": 422, "length": 32 }
      ]
    }
  },
  "methodIdentifiers": {
    "claim(uint256,bytes32[])": "2f52ebb7",
    "hasClaimed(address)": "73b2e80e",
    "merkleRoot()": "2eb4a7ab",
    "token()": "fc0c546a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInMerkle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Anish Agnihotri <contact@anishagnihotri.com>\",\"details\":\"Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost\",\"events\":{\"Claim(address,uint256)\":{\"params\":{\"amount\":\"of tokens claimed\",\"to\":\"recipient of claim\"}}},\"kind\":\"dev\",\"methods\":{\"claim(uint256,bytes32[])\":{\"params\":{\"amount\":\"of tokens owed to claimee\",\"proof\":\"merkle proof to prove address and amount are in tree\"}},\"constructor\":{\"params\":{\"_merkleRoot\":\"of claimees\",\"_token\":\"of token\"}}},\"title\":\"MerkleClaimERC20\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Thrown if address has already claimed\"}],\"NotInMerkle()\":[{\"notice\":\"Thrown if address/amount are not part of Merkle tree\"}]},\"events\":{\"Claim(address,uint256)\":{\"notice\":\"Emitted after a successful token claim\"}},\"kind\":\"user\",\"methods\":{\"claim(uint256,bytes32[])\":{\"notice\":\"Allows claiming tokens if address is part of merkle tree\"},\"constructor\":{\"notice\":\"Creates a new MerkleClaimERC20 contract\"},\"hasClaimed(address)\":{\"notice\":\"Mapping of addresses who have claimed tokens\"},\"merkleRoot()\":{\"notice\":\"ERC20-claimee inclusion root\"}},\"notice\":\"ERC20 claimable by members of a merkle tree\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Drop.sol\":\"MerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac\",\"dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR\"]},\"src/Drop.sol\":{\"keccak256\":\"0x7088be66ea73ee00a56e0ff8b2999a07341b9a945e1cda90d6e7bc45c4f130c3\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://1cb869c941726eaed81b046b7115d43dc5c35b7f76925f375627e41d1d8c8073\",\"dweb:/ipfs/QmQaDDraXyCPitTijzwAcJLJ1xEDPD31b67w1Lh7mVKNSH\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.23+commit.f704f362" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_merkleRoot",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        { "inputs": [], "type": "error", "name": "AlreadyClaimed" },
        { "inputs": [], "type": "error", "name": "NotInMerkle" },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Claim",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "amount", "type": "uint256" },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasClaimed",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "merkleRoot",
          "outputs": [
            { "internalType": "bytes32", "name": "", "type": "bytes32" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            { "internalType": "contract ERC20", "name": "", "type": "address" }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claim(uint256,bytes32[])": {
            "params": {
              "amount": "of tokens owed to claimee",
              "proof": "merkle proof to prove address and amount are in tree"
            }
          },
          "constructor": {
            "params": { "_merkleRoot": "of claimees", "_token": "of token" }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(uint256,bytes32[])": {
            "notice": "Allows claiming tokens if address is part of merkle tree"
          },
          "constructor": {
            "notice": "Creates a new MerkleClaimERC20 contract"
          },
          "hasClaimed(address)": {
            "notice": "Mapping of addresses who have claimed tokens"
          },
          "merkleRoot()": { "notice": "ERC20-claimee inclusion root" }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": { "src/Drop.sol": "MerkleClaim" },
      "evmVersion": "paris",
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        "keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
        "urls": [
          "bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
          "dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
        "urls": [
          "bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
          "dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
        "urls": [
          "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
          "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
        "urls": [
          "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
          "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        "urls": [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
        "keccak256": "0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058",
        "urls": [
          "bzz-raw://da5d3d47d35af4373743a559ea4b9b7ecfe4bab6f0703f410c1e59959b7966ac",
          "dweb:/ipfs/QmTHdoghh4WLu4yURjGEgRk162pcwwdsG52MPGa12GqnGR"
        ],
        "license": "MIT"
      },
      "src/Drop.sol": {
        "keccak256": "0x7088be66ea73ee00a56e0ff8b2999a07341b9a945e1cda90d6e7bc45c4f130c3",
        "urls": [
          "bzz-raw://1cb869c941726eaed81b046b7115d43dc5c35b7f76925f375627e41d1d8c8073",
          "dweb:/ipfs/QmQaDDraXyCPitTijzwAcJLJ1xEDPD31b67w1Lh7mVKNSH"
        ],
        "license": "AGPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/Drop.sol",
    "id": 1430,
    "exportedSymbols": {
      "Context": [785],
      "ERC20": [651],
      "IERC20": [729],
      "IERC20Errors": [41],
      "IERC20Metadata": [755],
      "MerkleClaim": [1429],
      "MerkleProof": [1322]
    },
    "nodeType": "SourceUnit",
    "src": "42:2338:6",
    "nodes": [
      {
        "id": 1324,
        "nodeType": "PragmaDirective",
        "src": "42:24:6",
        "nodes": [],
        "literals": ["solidity", ">=", "0.8", ".0"]
      },
      {
        "id": 1325,
        "nodeType": "ImportDirective",
        "src": "107:55:6",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1430,
        "sourceUnit": 652,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1326,
        "nodeType": "ImportDirective",
        "src": "163:68:6",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1430,
        "sourceUnit": 1323,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1429,
        "nodeType": "ContractDefinition",
        "src": "473:1906:6",
        "nodes": [
          {
            "id": 1330,
            "nodeType": "VariableDeclaration",
            "src": "598:35:6",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 1328,
              "nodeType": "StructuredDocumentation",
              "src": "553:40:6",
              "text": "@notice ERC20-claimee inclusion root"
            },
            "functionSelector": "2eb4a7ab",
            "mutability": "immutable",
            "name": "merkleRoot",
            "nameLocation": "623:10:6",
            "scope": 1429,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 1329,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "598:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 1333,
            "nodeType": "VariableDeclaration",
            "src": "640:18:6",
            "nodes": [],
            "constant": false,
            "functionSelector": "fc0c546a",
            "mutability": "mutable",
            "name": "token",
            "nameLocation": "653:5:6",
            "scope": 1429,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ERC20_$651",
              "typeString": "contract ERC20"
            },
            "typeName": {
              "id": 1332,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1331,
                "name": "ERC20",
                "nameLocations": ["640:5:6"],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 651,
                "src": "640:5:6"
              },
              "referencedDeclaration": 651,
              "src": "640:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$651",
                "typeString": "contract ERC20"
              }
            },
            "visibility": "public"
          },
          {
            "id": 1338,
            "nodeType": "VariableDeclaration",
            "src": "777:42:6",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 1334,
              "nodeType": "StructuredDocumentation",
              "src": "716:56:6",
              "text": "@notice Mapping of addresses who have claimed tokens"
            },
            "functionSelector": "73b2e80e",
            "mutability": "mutable",
            "name": "hasClaimed",
            "nameLocation": "809:10:6",
            "scope": 1429,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1337,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 1335,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "785:7:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "777:24:6",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 1336,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "796:4:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 1341,
            "nodeType": "ErrorDefinition",
            "src": "922:23:6",
            "nodes": [],
            "documentation": {
              "id": 1339,
              "nodeType": "StructuredDocumentation",
              "src": "868:49:6",
              "text": "@notice Thrown if address has already claimed"
            },
            "errorSelector": "646cf558",
            "name": "AlreadyClaimed",
            "nameLocation": "928:14:6",
            "parameters": {
              "id": 1340,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "942:2:6"
            }
          },
          {
            "id": 1344,
            "nodeType": "ErrorDefinition",
            "src": "1019:20:6",
            "nodes": [],
            "documentation": {
              "id": 1342,
              "nodeType": "StructuredDocumentation",
              "src": "950:64:6",
              "text": "@notice Thrown if address/amount are not part of Merkle tree"
            },
            "errorSelector": "8a585be2",
            "name": "NotInMerkle",
            "nameLocation": "1025:11:6",
            "parameters": {
              "id": 1343,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1036:2:6"
            }
          },
          {
            "id": 1362,
            "nodeType": "FunctionDefinition",
            "src": "1218:127:6",
            "nodes": [],
            "body": {
              "id": 1361,
              "nodeType": "Block",
              "src": "1265:80:6",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 1355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1353,
                      "name": "merkleRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1330,
                      "src": "1275:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1354,
                      "name": "_merkleRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1350,
                      "src": "1288:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1275:24:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 1356,
                  "nodeType": "ExpressionStatement",
                  "src": "1275:24:6"
                },
                {
                  "expression": {
                    "id": 1359,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1357,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1333,
                      "src": "1324:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$651",
                        "typeString": "contract ERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1358,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1348,
                      "src": "1332:6:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$651",
                        "typeString": "contract ERC20"
                      }
                    },
                    "src": "1324:14:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$651",
                      "typeString": "contract ERC20"
                    }
                  },
                  "id": 1360,
                  "nodeType": "ExpressionStatement",
                  "src": "1324:14:6"
                }
              ]
            },
            "documentation": {
              "id": 1345,
              "nodeType": "StructuredDocumentation",
              "src": "1092:121:6",
              "text": "@notice Creates a new MerkleClaimERC20 contract\n @param _token of token\n @param _merkleRoot of claimees"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 1351,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1348,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "1236:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1362,
                  "src": "1230:12:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$651",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 1347,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1346,
                      "name": "ERC20",
                      "nameLocations": ["1230:5:6"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 651,
                      "src": "1230:5:6"
                    },
                    "referencedDeclaration": 651,
                    "src": "1230:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$651",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1350,
                  "mutability": "mutable",
                  "name": "_merkleRoot",
                  "nameLocation": "1252:11:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1362,
                  "src": "1244:19:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1349,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1244:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1229:35:6"
            },
            "returnParameters": {
              "id": 1352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1265:0:6"
            },
            "scope": 1429,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 1369,
            "nodeType": "EventDefinition",
            "src": "1525:48:6",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 1363,
              "nodeType": "StructuredDocumentation",
              "src": "1393:127:6",
              "text": "@notice Emitted after a successful token claim\n @param to recipient of claim\n @param amount of tokens claimed"
            },
            "eventSelector": "47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4",
            "name": "Claim",
            "nameLocation": "1531:5:6",
            "parameters": {
              "id": 1368,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1365,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1553:2:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1369,
                  "src": "1537:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1364,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1537:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1367,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1565:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1369,
                  "src": "1557:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1366,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1557:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1536:36:6"
            }
          },
          {
            "id": 1428,
            "nodeType": "FunctionDefinition",
            "src": "1819:558:6",
            "nodes": [],
            "body": {
              "id": 1427,
              "nodeType": "Block",
              "src": "1885:492:6",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "baseExpression": {
                      "id": 1378,
                      "name": "hasClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1338,
                      "src": "1954:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 1381,
                    "indexExpression": {
                      "expression": {
                        "id": 1379,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1965:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1380,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1969:6:6",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1965:10:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1954:22:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1385,
                  "nodeType": "IfStatement",
                  "src": "1950:51:6",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1382,
                        "name": "AlreadyClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1341,
                        "src": "1985:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1383,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1985:16:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1384,
                    "nodeType": "RevertStatement",
                    "src": "1978:23:6"
                  }
                },
                {
                  "assignments": [1387],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1387,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "2077:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1427,
                      "src": "2069:12:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1386,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2069:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1396,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1391,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2111:3:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1392,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2115:6:6",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2111:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1393,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1372,
                            "src": "2123:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1389,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2094:3:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2098:12:6",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "2094:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1394,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2094:36:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1388,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2084:9:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2084:47:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2069:62:6"
                },
                {
                  "assignments": [1398],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1398,
                      "mutability": "mutable",
                      "name": "isValidLeaf",
                      "nameLocation": "2146:11:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1427,
                      "src": "2141:16:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1397,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2141:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1405,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1401,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1375,
                        "src": "2179:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      {
                        "id": 1402,
                        "name": "merkleRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1330,
                        "src": "2186:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1403,
                        "name": "leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1387,
                        "src": "2198:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 1399,
                        "name": "MerkleProof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1322,
                        "src": "2160:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_MerkleProof_$1322_$",
                          "typeString": "type(library MerkleProof)"
                        }
                      },
                      "id": 1400,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2172:6:6",
                      "memberName": "verify",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 812,
                      "src": "2160:18:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                        "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                      }
                    },
                    "id": 1404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2160:43:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2141:62:6"
                },
                {
                  "condition": {
                    "id": 1407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2217:12:6",
                    "subExpression": {
                      "id": 1406,
                      "name": "isValidLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1398,
                      "src": "2218:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1411,
                  "nodeType": "IfStatement",
                  "src": "2213:38:6",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1408,
                        "name": "NotInMerkle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1344,
                        "src": "2238:11:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1409,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2238:13:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1410,
                    "nodeType": "RevertStatement",
                    "src": "2231:20:6"
                  }
                },
                {
                  "expression": {
                    "id": 1417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1412,
                        "name": "hasClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1338,
                        "src": "2296:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1415,
                      "indexExpression": {
                        "expression": {
                          "id": 1413,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2307:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1414,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2311:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2307:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2296:22:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1416,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2321:4:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2296:29:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1418,
                  "nodeType": "ExpressionStatement",
                  "src": "2296:29:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1422,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2351:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1423,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2355:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2351:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1424,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1372,
                        "src": "2363:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1419,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1333,
                        "src": "2336:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$651",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 1421,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2342:8:6",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 261,
                      "src": "2336:14:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2336:34:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1426,
                  "nodeType": "ExpressionStatement",
                  "src": "2336:34:6"
                }
              ]
            },
            "documentation": {
              "id": 1370,
              "nodeType": "StructuredDocumentation",
              "src": "1624:190:6",
              "text": "@notice Allows claiming tokens if address is part of merkle tree\n @param amount of tokens owed to claimee\n @param proof merkle proof to prove address and amount are in tree"
            },
            "functionSelector": "2f52ebb7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "1828:5:6",
            "parameters": {
              "id": 1376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1372,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1842:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1428,
                  "src": "1834:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1371,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1834:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1375,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "1869:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1428,
                  "src": "1850:24:6",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1373,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1850:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 1374,
                    "nodeType": "ArrayTypeName",
                    "src": "1850:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1833:42:6"
            },
            "returnParameters": {
              "id": 1377,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1885:0:6"
            },
            "scope": 1429,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleClaim",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1327,
          "nodeType": "StructuredDocumentation",
          "src": "233:240:6",
          "text": "@title MerkleClaimERC20\n @notice ERC20 claimable by members of a merkle tree\n @author Anish Agnihotri <contact@anishagnihotri.com>\n @dev Solmate ERC20 includes unused _burn logic that can be removed to optimize deployment cost"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [1429],
        "name": "MerkleClaim",
        "nameLocation": "482:11:6",
        "scope": 1430,
        "usedErrors": [1341, 1344],
        "usedEvents": [1369]
      }
    ],
    "license": "AGPL-3.0-only"
  },
  "id": 6
}
